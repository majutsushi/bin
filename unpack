#!/usr/bin/env python3
# Author: Jan Larres <jan@majutsushi.net>
# License: MIT/X11

import argparse
import bz2
import gzip
import lzma
import os
import shutil
import subprocess
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import BinaryIO, Callable  # noqa: UP035

MIMETYPES = {
    "application/vnd.comicbook+zip": "zip",
    "application/vnd.comicbook-rar": "rar",
    "application/x-7z-compressed": "7z",
    "application/x-bzip-compressed-tar": "bztar",
    "application/x-compressed-tar": "gztar",
    "application/x-lha": "lha",
    "application/x-tar": "tar",
    "application/x-xz-compressed-tar": "xztar",
}


class UnpackError(Exception):
    pass


def main(args: argparse.Namespace) -> None:
    register_formats()

    try:
        do_unpack(args.archive, Path.cwd())
    except Exception as e:  # noqa: BLE001
        if args.verbose:
            raise
        print(e)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Unpack various archives")
    parser.add_argument("archive", type=Path, help="the archive to unpack")
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="increase output verbosity",
    )
    return parser.parse_args()


def register_formats() -> None:
    # Register some additional extensions for ZIP files
    shutil.register_unpack_format(
        "zip2",
        [".jar", ".war", ".ear", ".xpi", ".cbz", ".epub"],
        shutil._unpack_zipfile,  # type: ignore[attr-defined]
        description="Additional ZIP extensions",
    )

    shutil.register_unpack_format("7z", [".7z"], unpack_7z)
    shutil.register_unpack_format("arc", [".arc"], unpack_arc)
    shutil.register_unpack_format(
        "bz2", [".bz2"], expand_file, extra_args=[("open_func", bz2.open)]
    )
    shutil.register_unpack_format("deb", [".deb"], unpack_deb)
    shutil.register_unpack_format(
        "gz", [".gz", ".Z"], expand_file, extra_args=[("open_func", gzip.open)]
    )
    shutil.register_unpack_format("lha", [".lha", ".lzh"], unpack_lha)
    shutil.register_unpack_format("rpm", [".rpm"], unpack_rpm)
    shutil.register_unpack_format(
        "xz",
        [".xz", ".lzma"],
        expand_file,
        extra_args=[("open_func", lzma.open)],
    )
    shutil.register_unpack_format("zoo", [".zoo"], unpack_zoo)

    unrar_func = unpack_rar if shutil.which("unrar") else unpack_7z
    shutil.register_unpack_format("rar", [".rar", ".cbr"], unrar_func)


def expand_file(
    archive: str,
    output_dir: str,
    open_func: Callable[[Path], BinaryIO],
) -> None:
    archive_path = Path(archive)
    with open_func(archive_path) as src, Path(output_dir, archive_path.stem).open(
        "wb"
    ) as dst:
        shutil.copyfileobj(src, dst)


def unpack_7z(archive: str, output_dir: str) -> None:
    subprocess.run(["7z", "x", f"-o{output_dir}", archive], check=True)


def unpack_arc(archive: str, output_dir: str) -> None:
    if shutil.which("unar"):
        subprocess.run(["unar", "-o", output_dir, archive], check=True)
    else:
        subprocess.run(["arc", "x", archive], cwd=output_dir, check=True)


def unpack_deb(archive: str, output_dir: str) -> None:
    subprocess.run(["ar", "x", archive], cwd=output_dir, check=True)
    data = next(Path(output_dir).glob("data.tar.*"))
    do_unpack(data, Path(output_dir))
    data.unlink()
    control = next(Path(output_dir).glob("control.tar.*"))
    do_unpack(control, Path(output_dir))
    control.unlink()


def unpack_lha(archive: str, output_dir: str) -> None:
    subprocess.run(["lha", "-x", archive], cwd=output_dir, check=True)


def unpack_rar(archive: str, output_dir: str) -> None:
    subprocess.run(["unrar", "x", archive, f"{output_dir}/"], check=True)


def unpack_rpm(archive: str, output_dir: str) -> None:
    proc = subprocess.Popen(["rpm2cpio", archive], stdout=subprocess.PIPE)
    subprocess.run(["cpio", "-idmv"], cwd=output_dir, stdin=proc.stdout, check=True)
    proc.wait()


def unpack_zoo(archive: str, output_dir: str) -> None:
    subprocess.run(["unar", "-o", output_dir, archive], check=True)


def do_unpack(archive: Path, output_path: Path) -> None:
    print(f"Unpacking {archive} ...")
    with TemporaryDirectory(prefix="unpack-") as tmpdir:
        try:
            shutil.unpack_archive(archive, tmpdir)
        except shutil.ReadError as e:
            # Try getting the mimetype with Gio
            from gi.repository import Gio

            with archive.open("rb") as f:
                mime = Gio.content_type_guess(
                    filename=os.fspath(archive), data=f.read(1024)
                )[0]
            if mime in MIMETYPES:
                try:
                    shutil.unpack_archive(archive, tmpdir, format=MIMETYPES[mime])
                except shutil.ReadError as e2:
                    raise UnpackError(str(e2)) from e
            else:
                raise UnpackError(str(e)) from e

        items = list(Path(tmpdir).iterdir())
        if len(items) == 0:
            # Didn't unpack anything?
            raise UnpackError("No files were unpacked")
        if len(items) == 1:
            # Move single items directly into the target directory
            item = items[0]
            shutil.move(os.fspath(item), os.fspath(output_path))
            final_path = output_path / item.name
            print(f"Unpacked {archive} to {get_display_path(final_path)}")
        else:
            # Move multiple items into a new directory named after the archive
            output_dirname = archive.stem
            if output_dirname.endswith(".tar"):
                output_dirname = output_dirname[: -len(".tar")]
            output_path = output_path / output_dirname
            if output_path.exists():
                raise UnpackError(f"Directory {output_path} already exists")
            output_path.mkdir()
            for item in items:
                shutil.move(os.fspath(item), os.fspath(output_path))
            print(f"Unpacked {archive} to {get_display_path(output_path)}")


def get_display_path(abs_path: Path) -> Path:
    try:
        return abs_path.relative_to(Path.cwd())
    except ValueError:
        return abs_path


if __name__ == "__main__":
    main(parse_args())
