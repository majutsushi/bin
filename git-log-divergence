#!/usr/bin/env python3
# Author: Jan Larres <jan@majutsushi.net>
# License: MIT/X11

import argparse
import fileinput
import signal
from subprocess import run, check_output
import sys

import logging
logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
log = logging.getLogger(__name__)

try:
    import better_exceptions
except Exception:
    pass

def sigint_handler(signal, frame):
    sys.exit(1)

def parse_args():
    parser = argparse.ArgumentParser(description='Log graph of branch diverge')
    parser.add_argument('rev', nargs='+', help='Revisions to log')
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help='increase output verbosity')
    return parser.parse_args()

def main(args):
    if args.verbose:
        log.setLevel(logging.DEBUG)

    revs = args.rev
    if len(revs) == 1:
        revs += ['HEAD']

    cmd = ['git', 'merge-base', '--octopus', '--all'] + revs
    log.debug(cmd)
    merge_bases = check_output(cmd).decode('utf-8').splitlines()

    exclusions = [ base + '^' for base in merge_bases ]
    log.debug(exclusions)

    cmd = ['git', 'log', '--oneline', '--decorate', '--graph'] + revs \
            + ['--not'] + exclusions
    log.debug(cmd)
    run(cmd)

if __name__ == '__main__':
    signal.signal(signal.SIGINT, sigint_handler)
    sys.exit(main(parse_args()))
