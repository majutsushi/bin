#!/usr/bin/env python3
# Author: Jan Larres <jan@majutsushi.net>
# License: MIT/X11

import argparse
import cgi
from collections import namedtuple
from importlib.util import find_spec
import logging
import os
import shutil
from subprocess import check_output, STDOUT
import sys
import tempfile
from typing import Optional

import requests

logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)
log = logging.getLogger(__name__)


if find_spec("better_exceptions"):
    import better_exceptions  # pylint: disable=unused-import

GH_URL = "https://api.github.com/repos/%s/releases/latest"

AppInfo = namedtuple("AppInfo", ["name", "dl_url"])


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Update apps")
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="increase output verbosity",
    )
    return parser.parse_args()


def get_app_info(project: str, name_filter: str) -> AppInfo:
    json = requests.get(GH_URL % project).json()
    info = [
        AppInfo(asset["name"], asset["browser_download_url"])
        for asset in json["assets"]
        if asset["name"].find(name_filter) != -1
    ]
    return info[0]


def dl_file(url: str, filename: Optional[str] = None) -> str:
    log.debug("Downloading %s", url)
    r = requests.get(url)
    r.raise_for_status()

    if filename is None:
        if "content-disposition" in r.headers:
            _, params = cgi.parse_header(r.headers["content-disposition"])
            if "filename*" in params:
                raise NotImplementedError("'filename*' parameter is not yet supported")
            if "filename" not in params:
                raise ValueError("'filename' parameter not found in header")
            filename = params["filename"]
        else:
            _, filename = url.rsplit("/", maxsplit=1)
    with open(filename, "wb") as f:
        f.write(r.content)

    return filename


def update_release(
    project: str, name_filter: str, is_archive: bool, bin_name: str, path: Optional[str]
) -> None:
    print("Updating " + project)

    info = get_app_info(project, name_filter)
    dl_file(info.dl_url, info.name)

    if os.path.exists(bin_name):
        os.remove(bin_name)

    if is_archive:
        if path is None:
            raise ValueError("'path' must be set if 'is_archive' is true")
        with tempfile.NamedTemporaryFile() as fp:
            check_output(
                ["aunpack", "--save-outdir=" + fp.name, info.name], stderr=STDOUT
            )
            outfile = fp.readlines()
            log.debug("outfile: %s", str(outfile))
            if not outfile:
                if path != bin_name:
                    shutil.move(path, bin_name)
            else:
                outdir = outfile[0].decode("utf-8").strip()
                shutil.move(outdir + "/" + path, bin_name)
                shutil.rmtree(outdir)
        os.remove(info.name)
    else:
        if info.name != bin_name:
            shutil.move(info.name, bin_name)
        os.chmod(bin_name, 0o755)
    print("Installed binary '%s'" % bin_name)


def update_script(url: str, filename: Optional[str] = None) -> None:
    filename = dl_file(url, filename)
    os.chmod(filename, 0o755)
    print("Installed script '%s'" % filename)


def main() -> int:
    if args.verbose:
        log.setLevel(logging.DEBUG)

    appsdir = os.path.expanduser("~/apps/bin")
    os.makedirs(appsdir, exist_ok=True)
    oldpwd = os.getcwd()
    os.chdir(appsdir)

    update_release(
        project="github/hub",
        name_filter="linux-amd64",
        is_archive=True,
        bin_name="hub",
        path="bin/hub",
    )
    update_release(
        project="junegunn/fzf-bin",
        name_filter="linux_amd64",
        is_archive=True,
        bin_name="fzf",
        path="fzf",
    )
    update_release(
        project="Netflix-Skunkworks/go-jira",
        name_filter="linux-amd64",
        is_archive=False,
        bin_name="jira",
        path=None,
    )
    update_release(
        project="antonmedv/fx",
        name_filter="fx-linux",
        is_archive=False,
        bin_name="fx",
        path=None,
    )

    # pylint: disable=line-too-long
    update_script(
        "https://raw.githubusercontent.com/eikenb/terminal-colors/master/terminal-colors"
    )
    update_script("https://raw.githubusercontent.com/Russell91/sshrc/master/sshrc")
    update_script("https://raw.githubusercontent.com/stephencelis/ghi/master/ghi")
    update_script("https://raw.githubusercontent.com/jeffkaufman/icdiff/master/icdiff")
    update_script("https://git.kitenet.net/index.cgi/moreutils.git/plain/ts")
    update_script(
        "https://raw.githubusercontent.com/grawity/code/master/term/xterm-color-chooser"
    )
    update_script("https://raw.githubusercontent.com/holman/spark/master/spark")
    update_script(
        "https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/third_party/build_fatpack/diff-so-fancy"
    )
    update_script(
        "https://raw.githubusercontent.com/bill-auger/git-branch-status/master/git-branch-status"
    )
    update_script(
        "https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker"
    )
    # pylint: enable=line-too-long

    os.chdir(oldpwd)

    return 0


if __name__ == "__main__":
    args = parse_args()
    sys.exit(main())
