#!/usr/bin/python -u
# -u for unbuffered I/O

import sys
import os
import re
from time import strftime, localtime
import mechanize
import gnomekeyring as gkey
from subprocess import Popen, PIPE, check_call, CalledProcessError
import shlex
from tempfile import mkstemp
import md5

br = mechanize.Browser()

def system(cmd, msg = None):
    p = Popen(shlex.split(cmd), stdout=PIPE, stderr=PIPE)
    (stdout, stderr) = p.communicate()

    if p.returncode != 0:
        if msg is None:
            print 'Error executing', cmd, '!'
        else:
            print msg
        print stderr
        exit()

    return stdout.splitlines()

def get_script_files():
    def is_not_ignored(file):
        output = system('git check-attr export-ignore ' + file)[0]
        return output.split()[-1] != 'set'

    files = system('git ls-files --cached')
    return [file for file in files if is_not_ignored(file)]

def update_files(scrver):
    print 'Updating version number in files to', scrver + '...',

    pat = re.compile(r'^(?P<text>(" )?Version:\s+)[0-9.]+$')
    files = get_script_files()

    for fname in files:
        with open(fname) as f:
            out_fname = fname + '.tmp'
            out = open(out_fname, 'w')
            for line in f:
                out.write(re.sub(pat, lambda m: m.group('text') + scrver, line))
            out.close()
            os.rename(out_fname, fname)

    print 'done.'

def update_gh_site(scrver, scrcommfile, reldate):
    print 'Updating website...',

    system('git checkout gh-pages')
    out_fname = '_posts/' + reldate + '-' + scrver + '.markdown'

    with open(out_fname, 'w') as outf:
        outf.write('---\n')
        outf.write('title: ' + scrver + '\n')
        outf.write('---\n\n')

        with open(scrcommfile) as inf:
            for line in inf:
                outf.write(line)

    system('git add ' + out_fname)
    system('git commit -m "Version ' + scrver + '"')
    system('git checkout master')

    print 'done.'

def login():
    print 'Logging in...',

    pwdata = gkey.find_network_password_sync(server = 'www.vim.org',
                                             user = 'majutsushi')[0]

    br.open('http://www.vim.org/login.php')
    br.select_form(name = 'login')
    br.form['userName'] = pwdata['user']
    br.form['password'] = pwdata['password']
    br.submit()

    print 'done.'

def upload_script(scrid, scrfile, vimver, scrver, scrcomment):
    print 'Uploading script file ' + scrfile + '...',

    br.open('http://www.vim.org/scripts/script.php?script_id=' + scrid)
    br.follow_link(text = 'upload new version')
    br.select_form(name = 'script')
    br.form.add_file(open(scrfile), content_type = 'text/plain',
                     filename = scrfile, name = 'script_file')
    br.form['vim_version'] = [str(vimver)]
    br.form['script_version'] = scrver
    br.form['version_comment'] = scrcomment
    br.submit(label = 'upload')

    print 'done.'

def make_vimball(scrname):
    print 'Creating Vimball...',

    export = get_script_files()

    filecmds = ''
    for file in export:
        filecmds += ' -c ":put =\'' + file + '\'" '

    cmd = 'vim ' + filecmds + \
                 ' -c ":g/^$/d" ' + \
                 ' -c ":let g:vimball_home = \'.\'" ' + \
                 ' -c ":%MkVimball! ' + scrname + '"' + \
                 ' -c ":q!"'
    system(cmd)
    print 'done.'
    return os.path.abspath(scrname + '.vmb')

def call_vim(filename, args = None):
    def abort():
        print 'Aborted.'
        os.unlink(scrcommfile)
        exit()

    cmd = 'vim ' + filename
    if args is not None:
        cmd += ' ' + args

    timestamp = os.stat(filename).st_mtime
    with open(filename) as f:
        checksum = md5.md5(f.read()).hexdigest()
    try:
        check_call(shlex.split(cmd))
    except CalledProcessError:
        abort()
    if timestamp == os.stat(filename).st_mtime:
        abort()
    else:
        with open(filename) as f:
            newchecksum = md5.md5(f.read()).hexdigest()
        if newchecksum == checksum:
            abort()

if __name__ == '__main__':
    system('git diff --no-ext-diff --quiet --exit-code --ignore-submodules',
           'Error: workdir is dirty!')

    if not os.path.exists('.info'):
        print 'No .info file found, exiting.'
        exit()

    with open('.info') as infofile:
        info    = infofile.readlines()
        scrname = info[0].strip()
        scrid   = info[1].strip()

    print 'Scriptname:', scrname
    print 'Script ID:', scrid

    oscrvers = system('git describe --tags --abbrev=0')[0]
    oscrmatch = re.match('^v(?P<major>\d+)\.(?P<minor>\d+)(\.(?P<bugfix>\d+))?$', oscrvers)
    omajor = oscrmatch.group('major')
    ominor = oscrmatch.group('minor')
    obugfix = oscrmatch.group('bugfix')
    if obugfix is not None:
        print 'Old version:', omajor + '.' + ominor + '.' + obugfix
    else:
        print 'Old version:', omajor + '.' + ominor
    scrver = raw_input('New version [' + omajor + '.' + str(int(ominor) + 1) + ']: ')

    if len(scrver) == 0:
        scrver = omajor + '.' + str(int(ominor) + 1)

    vimver = raw_input('Vim version [7.0]: ')
    if len(vimver) == 0:
        vimver = 7.0

    reldate = strftime('%Y-%m-%d', localtime())

    [handle, scrcommfile] = mkstemp()
    os.close(handle)

    call_vim(scrcommfile)

    docfile = 'doc/' + scrname + '.txt'
    headerpat = r'^\d\+\.\d\+\(\.\d\+\)\? (\d\{4}-\d\{2}-\d\{2})$'
    docargs  = ' -c "call search(\'' + headerpat + '\')"'
    docargs += ' -c "normal! 2k"'
    docargs += ' -c "silent put =\'\'"'
    docargs += ' -c "read ' + scrcommfile + '"'
    docargs += ' -c "normal! >ipgqip{"'
    docargs += ' -c "silent put =\'' + scrver + ' (' + reldate + ')\'"'
    # docargs += ' -c "wq"'

    call_vim(docfile, docargs)

    update_files(scrver)
    print 'Committing version', scrver + '...',
    system('git commit -a -m "Version ' + scrver + '"')
    print 'done.'
    print 'Tagging version', scrver + '...',
    system('git tag v' + scrver)
    print 'done.'

    update_gh_site(scrver, scrcommfile, reldate)

    print 'Pushing changes...',
    system('git push')
    system('git push --tags')
    print 'done.'

    with open(scrcommfile) as f:
        scrcomment = f.read()

    vimball = make_vimball(scrname)
    login()
    upload_script(scrid, vimball, vimver, scrver, scrcomment)
    os.unlink(vimball)
    os.unlink(scrcommfile)
