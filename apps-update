#!/usr/bin/env python3
# Author: Jan Larres <jan@majutsushi.net>
# License: MIT/X11

import argparse
from collections import namedtuple
import fileinput
import os
import requests
import shutil
import signal
import stat
from subprocess import check_call, check_output, STDOUT
import sys
import tempfile

import logging
logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
log = logging.getLogger(__name__)

try:
    import better_exceptions
except Exception:
    pass

GH_URL = 'https://api.github.com/repos/%s/releases/latest'

AppInfo = namedtuple('AppInfo', ['name', 'dl_url'])

def sigint_handler(signal, frame):
    sys.exit(1)

def parse_args():
    parser = argparse.ArgumentParser(description="Update apps")
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help="increase output verbosity")
    return parser.parse_args()

def get_app_info(project, filter):
    json = requests.get(GH_URL % project).json()
    info = [AppInfo(asset['name'], asset['browser_download_url'])
            for asset in json['assets']
            if asset['name'].find(filter) != -1]
    return info[0]

def update(project, filter, is_archive, path, bin):
    print("Updating " + project)

    info = get_app_info(project, filter)
    curl_args = ['curl', '-L', '-O']
    if not args.verbose:
        curl_args += ['-s', '-S']
    check_call(curl_args + [info.dl_url])

    if os.path.exists(bin):
        os.remove(bin)

    if is_archive:
        with tempfile.NamedTemporaryFile() as fp:
            check_output(['aunpack', '--save-outdir=' + fp.name, info.name],
                         stderr=STDOUT)
            outfile = fp.readlines()
            log.debug('outfile: ' + str(outfile))
            if len(outfile) == 0:
                if path != bin:
                    shutil.move(path, bin)
            else:
                outdir = outfile[0].decode('utf-8').strip()
                shutil.move(outdir + '/' + path, bin)
                shutil.rmtree(outdir)
        os.remove(info.name)
    else:
        if info.name != bin:
            shutil.move(info.name, bin)
        os.chmod(bin, 0o755)

def main():
    if args.verbose:
        log.setLevel(logging.DEBUG)

    appsdir = os.path.expanduser('~/apps/bin')
    os.makedirs(appsdir, exist_ok=True)
    oldpwd = os.getcwd()
    os.chdir(appsdir)

    update('github/hub', 'linux-amd64', True, 'bin/hub', 'hub')
    update('junegunn/fzf-bin', 'linux_amd64', True, 'fzf', 'fzf')
    update('Netflix-Skunkworks/go-jira', 'linux-amd64', False, None, 'jira')

    os.chdir(oldpwd)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, sigint_handler)
    args = parse_args()
    sys.exit(main())
